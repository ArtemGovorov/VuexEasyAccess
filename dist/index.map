{"version":3,"sources":["../node_modules/is-what/dist/index.js","objectDeepValueUtils.js","storeAccess.js","index.js"],"names":["spliceDeepValue","getKeysFromPath","path","match","getDeepRef","target","obj","keys","length","shift","key","hasOwnProperty","getDeepValue","setDeepValue","value","lastKey","pop","deepRef","join","popDeepValue","pushDeepValue","push","index","deleteCount","splice","makeMutationsForAllProps","propParent","Object","reduce","mutations","prop","propPath","name","toUpperCase","state","newVal","propValue","childrenMutations","defaultMutations","initialState","defaultSetter","payload","store","pArr","split","props","modulePath","actionPath","substring","action","_actions","dispatch","mutationPath","commit","defaultGetter","getterExists","getters","module","exports"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["parcelRequire=function(e,r,n,t){var i=\"function\"==typeof parcelRequire&&parcelRequire,o=\"function\"==typeof require&&require;function u(n,t){if(!r[n]){if(!e[n]){var f=\"function\"==typeof parcelRequire&&parcelRequire;if(!t&&f)return f(n,!0);if(i)return i(n,!0);if(o&&\"string\"==typeof n)return o(n);var c=new Error(\"Cannot find module '\"+n+\"'\");throw c.code=\"MODULE_NOT_FOUND\",c}p.resolve=function(r){return e[n][1][r]||r};var l=r[n]=new u.Module(n);e[n][0].call(l.exports,p,l,l.exports,this)}return r[n].exports;function p(e){return u(p.resolve(e))}}u.isParcelRequire=!0,u.Module=function(e){this.id=e,this.bundle=u,this.exports={}},u.modules=e,u.cache=r,u.parent=i,u.register=function(r,n){e[r]=[function(e,r){r.exports=n},{}]};for(var f=0;f<n.length;f++)u(n[f]);if(n.length){var c=u(n[n.length-1]);\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=c:\"function\"==typeof define&&define.amd?define(function(){return c}):t&&(this[t]=c)}return u}({1:[function(require,module,exports) {\nfunction n(n){return Object.prototype.toString.call(n).slice(8,-1)}function t(t){return\"Undefined\"===n(t)}function e(t){return\"Null\"===n(t)}function r(t){return\"Object\"===n(t)}function i(t){return\"Array\"===n(t)}function u(t){return\"String\"===n(t)}function o(t){return\"Number\"===n(t)}function c(t){return\"Boolean\"===n(t)}function f(t){return\"RegExp\"===n(t)}function s(t){return\"Date\"===n(t)}module.exports={getType:n,isUndefined:t,isNull:e,isObject:r,isArray:i,isString:u,isNumber:o,isBoolean:c,isRegExp:f,isDate:s};\n},{}]},{},[1], null)\n//# sourceMappingURL=/index.map","\nimport { isArray } from 'is-what'\n\n/**\n * Returns the keys of a path\n *\n * @param   {string} path   a/path/like.this\n * @returns {array} with keys\n */\nfunction getKeysFromPath (path) {\n  return path.match(/\\w+/g)\n}\n\n/**\n * Gets a deep property in an object, based on a path to that property\n *\n * @param {object} target an object to wherefrom to retrieve the deep reference of\n * @param {string} path   'path/to.prop'\n *\n * @returns {object} the property which was requested\n */\nfunction getDeepRef (target, path) {\n  let keys = getKeysFromPath(path)\n  let obj = target\n  while (obj && keys.length > 1) {\n    obj = obj[keys.shift()]\n  }\n  let key = keys.shift()\n  if (obj && obj.hasOwnProperty(key)) {\n    return obj[key]\n  }\n}\n\n/**\n * Gets a deep property in an object, based on a path to that property\n *\n * @param   {object} target   the Object to get the value of\n * @param   {string} path     'path/to/prop.subprop'\n *\n * @returns {object}          the property's value\n */\nfunction getDeepValue (target, path) {\n  return getDeepRef(target, path)\n}\n\n/**\n * Sets a value to a deep property in an object, based on a path to that property\n *\n * @param   {object} target   the Object to set the value on\n * @param   {string} path     'path/to/prop.subprop'\n * @param   {*}      value    the value to set\n *\n * @returns {object}          the original target object\n */\nfunction setDeepValue (target, path, value) {\n  const keys = getKeysFromPath(path)\n  const lastKey = keys.pop()\n  const deepRef = getDeepRef(target, keys.join())\n  if (deepRef && deepRef.hasOwnProperty(key)) {\n    deepRef[lastKey] = value\n  }\n  return target\n}\n\n/**\n * Pops a value of an array which is a deep property in an object, based on a path to that property\n *\n * @param   {object} target   the Object to set the value on\n * @param   {string} path     'path.to.sub.prop'\n *\n * @returns {*}               the popped value\n */\nfunction popDeepValue (target, path) {\n  const deepRef = getDeepRef(target, path)\n  if (!isArray(deepRef)) return\n  return deepRef.pop()\n}\n/**\n * Pushes a value in an array which is a deep property in an object, based on a path to that property\n *\n * @param   {object} target   the Object to set the value on\n * @param   {string} path     'path/to.sub.prop'\n * @param   {*}      value    the value to set\n *\n * @returns {number}          the new length of the array\n */\nfunction pushDeepValue (target, path, value) {\n  const deepRef = getDeepRef(target, path)\n  if (!isArray(deepRef)) return\n  return deepRef.push(value)\n}\n/**\n * Splice into an array which is a deep property in an object, based on a path to that property\n *\n * @param   {object} target       the Object to set the value on\n * @param   {string} path         'path/to.sub.prop'\n * @param   {*}      value        the value to splice in\n * @param   {number} index        the index to splice in the value, defaults to 0\n * @param   {number} deleteCount  the amount of items to delete, defaults to 0\n *\n * @returns {array}              an array containing the deleted elements\n */\nfunction spliceDeepValue (target, path, value, index = 0, deleteCount = 0) {\n  const deepRef = getDeepRef(target, path)\n  if (!isArray(deepRef)) return\n  return deepRef.splice(index, deleteCount, value)\n}\n\nexport { setDeepValue, getDeepValue, popDeepValue, pushDeepValue, spliceDeepValue }\n","/**\n * Vuex Easy Access plugin\n * Unified syntax with simple set() and get() store access + auto generate mutations!\n *\n * @author     Luca Ban\n * @contact    https://lucaban.com\n */\n\nimport { setDeepValue, getDeepValue, popDeepValue, pushDeepValue, spliceDeepValue } from './objectDeepValueUtils'\nimport { isObject, isArray } from 'is-what'\n\n/**\n * Creates the mutations for each property of the object passed recursively\n *\n * @param   {object} propParent an Object of which all props will get a mutation\n * @param   {string} path       the path taken until the current propParent instance\n *\n * @returns {object}            all mutations for each property.\n */\nfunction makeMutationsForAllProps(propParent, path) {\n  if (!isObject(propParent)) return {}\n  return Object.keys(propParent)\n  .reduce((mutations, prop) => {\n    let propPath = (!path)\n      ? prop\n      : path + '.' + prop\n    let name = 'SET_' + propPath.toUpperCase()\n    mutations[name] = (state, newVal) => {\n      return setDeepValue(state, propPath, newVal)\n    }\n    let propValue = propParent[prop]\n    // If the prop is an object, make the children setters as well\n    if (isObject(propValue)) {\n      let childrenMutations = makeMutationsForAllProps(propValue, propPath)\n      mutations = {...mutations, ...childrenMutations}\n    }\n    // If the prop is an array, make array mutations as well\n    if (isArray(propValue)) {\n      let pop = 'POP_' + propPath.toUpperCase()\n      mutations[pop] = (state) => {\n        return popDeepValue(state, propPath)\n      }\n      let push = 'PUSH_' + propPath.toUpperCase()\n      mutations[push] = (state, value) => {\n        return pushDeepValue(state, propPath, value)\n      }\n      let splice = 'SPLICE_' + propPath.toUpperCase()\n      mutations[splice] = (state, value, index, deleteCount) => {\n        return spliceDeepValue(state, propPath, value, index, deleteCount)\n      }\n    }\n    return mutations\n  }, {})\n}\n\n/**\n * Creates all mutations for the state of a module.\n * Usage:\n * commit('module/path/SET_PATH.TO.PROP', newValue)\n * Import method:\n * mutations {\n *   ...defaultMutations (initialState)\n * }\n *\n * @param   {object} initialState   the initial state of a module\n *\n * @returns {object}                all mutations for the state\n */\nfunction defaultMutations (initialState) {\n  return makeMutationsForAllProps(initialState)\n}\n\n/**\n * Creates a setter function in the store to set any state value\n * Usage:\n * `set('module/path/path.to.prop', newValue)`\n * it will check first for existence of: `dispatch('module/path/setPath.to.prop')`\n * if non existant it will execute: `commit('module/path/SET_PATH.TO.PROP', newValue)`\n * Import method:\n * `store.set = (path, payload) => { return defaultSetter(path, payload, store) }`\n *\n * @param   {string}   path     the path of the prop to set eg. 'info/user/favColours.primary'\n * @param   {*}        payload  the payload to set the prop to\n * @param   {object}   store    the store to attach\n *\n * @returns {function}          dispatch or commit\n */\nfunction defaultSetter (path, payload, store) {\n  // path = 'info/user/favColours.primary'\n  const pArr = path.split('/')\n  // ['info', 'user', 'favColours.primary']\n  const props = pArr.pop()\n  // 'favColours.primary'\n  const modulePath = (pArr.length)\n    ? pArr.join('/') + '/'\n    : ''\n  // 'info/user'\n  const actionName = 'set' + props[0].toUpperCase() + props.substring(1)\n  // 'setFavColours.primary'\n  const actionPath = modulePath + actionName\n  // 'info/user/setFavColours.primary'\n  const action = store._actions[actionPath]\n  if (action) {\n    return store.dispatch(actionPath, payload)\n  }\n  const mutationPath = modulePath + 'SET_' + props.toUpperCase()\n  return store.commit(mutationPath, payload)\n}\n\n/**\n * Creates a getter function in the store to set any state value\n * Usage:\n * `get('module/path/path.to.prop')`\n * it will check first for existence of: `getters['module/path/path.to.prop']`\n * if non existant it will return: `state.module.path.path.to.prop`\n * Import method:\n * `store.get = (path) => { return defaultGetter(path, store) }`\n *\n * @param   {string}   path     the path of the prop to get eg. 'info/user/favColours.primary'\n * @param   {object}   store    the store to attach\n *\n * @returns {function}          getter or state\n */\nfunction defaultGetter (path, store) {\n  const getterExists = store.getters.hasOwnProperty(path)\n  if (getterExists) return store.getters[path]\n  return getDeepValue(store.state, path)\n}\n\nexport default { defaultMutations, defaultSetter, defaultGetter }\n","/**\n * Vuex Easy Access plugin\n * Unified syntax with simple set() and get() store access + auto generate mutations!\n *\n * @author     Luca Ban\n * @contact    https://lucaban.com\n */\n\nimport { defaultMutations, defaultSetter, defaultGetter } from './storeAccess'\nimport { getDeepRef } from './objectDeepValueUtils'\n\nmodule.exports = { defaultMutations, defaultSetter, defaultGetter, getDeepRef }\n"]}